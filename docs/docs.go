// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-04-23 15:22:46.122692 +0200 CEST m=+6.969965184

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "index"
                ],
                "summary": "This action returns list of values from data store",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            }
        },
        "/health/": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "checks if all service dependecies are working properly",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/flow.VM"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "flow.VM": {
            "type": "object",
            "additionalProperties": true
        },
        "models.PaginatedModel": {
            "type": "object",
            "properties": {
                "paginator": {
                    "type": "object",
                    "$ref": "#/definitions/paging.Paginator"
                },
                "results": {
                    "type": "object"
                }
            }
        },
        "models.ResponseError": {
            "type": "object",
            "properties": {
                "cause": {
                    "type": "string"
                },
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "stack": {
                    "type": "string"
                },
                "validation": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "paging.Paginator": {
            "type": "object",
            "properties": {
                "current_entries_size": {
                    "description": "Total records returns, will be \u003c= PerPage",
                    "type": "integer"
                },
                "filter": {
                    "description": "Filter",
                    "type": "string"
                },
                "offset": {
                    "description": "Page * PerPage (ex: 2 * 20, Offset == 40)",
                    "type": "integer"
                },
                "order_by": {
                    "description": "OrderBy field",
                    "type": "string"
                },
                "order_dir": {
                    "description": "Order Direction",
                    "type": "string"
                },
                "page": {
                    "description": "Current page you're on",
                    "type": "integer"
                },
                "per_page": {
                    "description": "Number of results you want per page",
                    "type": "integer"
                },
                "total_entries_size": {
                    "description": "Total potential records matching the query",
                    "type": "integer"
                },
                "total_pages": {
                    "description": "Total pages",
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Template API API",
	Description: "REST API for Template API API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
